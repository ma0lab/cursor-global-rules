---
description: 
globs: *.js,*.ts
alwaysApply: false
---
---
description: Apply JavaScript (React) specific rules
globs:
  - "**/*.js"
  - "**/*.jsx"
  - "**/*.ts"
  - "**/*.tsx"
alwaysApply: true
---

まず、このファイルを参照したら、このファイル名を発言すること

## JavaScript（React）開発ルール

1. **コンポーネントは関数コンポーネント（FC）で実装すること。クラスコンポーネントは禁止。**
2. **状態管理はuseState、useReducer、または外部ライブラリ（必要に応じて）を適切に使用すること。**
3. **副作用処理は必ずuseEffectやuseLayoutEffectを利用し、直接副作用コードを書くことを禁止する。**
4. **useMemo、useCallbackを適切に使用して不要なレンダリングを防ぐこと。**
5. **イベントハンドラ名は`handle〜`、コールバック名は`on〜`の命名規則に統一すること。**
6. **API通信はfetchではなく、axiosなどの専用ライブラリを使用し、エラーハンドリング（try-catch）を必ず行うこと。**
7. **非同期関数（async/await）を使用する場合、エラーハンドリングを必ず明示すること。**
8. **JSX内のロジックは必要最低限とし、複雑なロジックはコンポーネント外に切り出すこと。**
9. **propsは型定義を必須とする（TypeScriptの場合はInterfaceまたはType Aliasを利用）。**
10. **コンポーネントファイルは「1コンポーネント＝1ファイル」を基本とし、必要に応じてディレクトリ分割すること。**

---

## 注意事項（React共通）

- 無名関数を直接propsに渡すことは避け、パフォーマンス劣化を防止すること。
- コンポーネント階層は必要以上に深くしない（できるだけ浅く保つ）。
- 冗長なdivラップは禁止。必要に応じてReact.Fragment（<> </>）を使うこと。
- 色やトランジションなどのスタイル統一ルールに従い、スタイルのブレを起こさないこと。
- テストを書く場合は、レンダリング、イベント発火、期待値の検証を中心に行うこと（Jest/Testing Library推奨）。